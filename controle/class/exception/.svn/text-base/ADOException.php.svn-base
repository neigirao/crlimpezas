<?php
/**
 * Declaraзгo da classe para tratamento de erros
 * A classe deve ser extendida da classe Exception do PHP
 */
 class ADOException extends Exception {
     //Faзo a declaraзгo das variбvis que vou utilizar no corpo da classe
     private $class = '',
     		 $cod = 0,
             $msg = '',
             $erromsg = '';
    
     // Esse mйtodo recebe os seguintes parametros: 
     // $class - Representa a classe do erro
     // $cod - Cуdigo de erro
     // $msg - Uma mensagem de erro personalizada
     // $erromsg - Uma mensagem de erro padrгo
      public function __construct(&$class, $msg = "") {
          
          $this->class = get_class($class);
          $this->cod = $class->sql->ErrorNo();
          $this->erromsg = $class->sql->ErrorMsg();
          $this->msg = $msg;
          
          # TRATAMENTO PARA REGISTRO DUPLICADO / UNIQUE
          if($this->cod == 1062){
			$campos = $class->sql->GetAttributeNames();
			//echo implode('-',$campos);
          	$posicaoCampo = trim(substr($this->erromsg, strrpos($this->erromsg, ' ')));
			$this->msg = 'Campo '.$campos[$posicaoCampo-1].' jб existe';
			$this->erromsg = str_replace($posicaoCampo, $campos[$posicaoCampo-1], $this->erromsg);
			
			$class->alert = utf8_encode($this->msg);
			$class->tpl->assign('alert',$class->alert);
          }
          
          //Aqui eu chamo o construtor da classe pai para garantir o funcionamento correto da minha classe        
          parent::__construct( $this->erromsg , $this->cod );
         
          $this->WriteLog();
      }
      
      private function outrasException(){
      	
      }
      
      /**
       * Mйtodo grava num log o erro gerado
       */
      private function WriteLog() {

      	$txt = 'log/log_'.$this->class. '_' . date('dmY') . '.txt';
         
      	 $msg = '';
      	 
         if( $file = fopen( $txt , 'a+' ) ) {
       
            $msg .=    __CLASS__ . ' hora: '.date('H:i') . ' ' .
                    "Erro [ {$this->cod} ]: linha ( {$this->line} ) " .
            		" em # $this->file # " . 
                    "{$this->msg} " .
                    "({$this->erromsg})" .
                    '-------------------------------------------------------------------';
           
            fwrite( $file , $msg.chr(13).chr(10) );
            fclose( $file );
         }
      }
      
      /**
       * @param Integer $cod     #Codigo do erro
       * @param String  $msg     #Mensagem de erro
       * @param String  $file    #Arquivo
       * @param Integer $line    #Linha
       * @example Mйtodo para chamar no erro handler # set_error_handler(array('ADOException', 'throwError'), E_ALL);
       *
       * @static
       */
      static public function throwError( $cod , $msg , $file , $line ) {
          //utilizo esse mйtodo para setar no erro Handler a chamada da classe
          $this->file = $file;
          $this->line = $line;
                   
          throw new outrasException( $cod , $msg );
      }
      
       /**
       * Metodo seta o erro na classe atual do smarty
       */
      public function setMesagemRetornoSmarty(&$objeto) {
        if(empty($objeto->alert)){
//      		$objeto->tpl->assign('error',utf8_encode((empty($this->msg)?$this->erromsg:$this->msg)));
      		$_SESSION['error'] = utf8_encode((empty($this->msg)?$this->erromsg:$this->msg));
        }
      }
      
 }
?>